1. Introduction to APIs:
    API is how the programs can interact with their servers
      request is made from the webpage and response is returned
  API is for interaction - basically a architectural style
      REST-api is most popular in use -- it follows HTTP protocols

2.. Structuring API Requests
      front-end --->  yours private api ----> your server ----> public api ----.> someone's else server
  api endpoints: base URL/some-endpoint(differs based on purpose of usage)
  query parameters: base URL/some-endpoint ? query=value (we can add query parameters as much as we need by adding '&' in between them)
  path parameters: base URL/some-endpoint/{path-parameters} (specific to identify a resource)


3.What is JSON?
  way to format data that can sent over interne t in a readable and efficient way
  JSON and js structure remains same
  JSON key requires quotes sothat it turned into a string and value can be any

  minimal size and each item is serialized while transfering through internet

JSON ---> js object: JSON.parse(json data) , can access it by data.name
js object ----> JSON : JSON.stringify(data), here data is js-object

4. Making Server-Side API Requests with Axios
    creating app that needs server side APi
  making requests from your server using node and axios
  axios package is from npm

  async- await is used for crating requests
  refer documentaion for syntax

5. API Authentication
  getting rights to access the api from api service provider
   1. no authentication:
        having no ways to authenticate
        mostly in public api
          
   2. basic authentication:
          maintaing a user account with the api provider 
          provides base-64 encoding
  
   3.  API key authorisation:
            allows to use api only after the user provides the valid api-key that is  given by the service provider and it is more secure
        authentication ---> user makes request to authenticate themselves by registering with the service provider
        authorization ---> client is allowed to use your api using api-key
  
    4. token based authentication:
      more secure
      token is generated by thr api and is used to interact with the api
  mostly use oAuth


6. REST APIs:
    making GET, POST, PUT, PATCH, DELETE  requests
    api to be restful then it should be able to handle all of these routes

  documentation -- axios api
      const {data} = await axios.get('URL', config)
      const {data} = await axios.post('URL', body, config)
      const {data} = await axios.put('URL', body, config)
      const {data} = await axios.patch('URL', body, config)
      const {data} = await axios.delete('URL', config)

7.  Secrets Project
      1. Import express and axios
      2. Created an express app and set the port number.
       3. Used the public folder for static files.
      4. When the user goes to the home page it should render the index.ejs file.
      5. Used axios to get a random secret and pass it to index.ejs to display the secret and the username of the secret.
      6. Listen on the predefined port and start the server.

      It displays the randomly selected secrets from the the secrets api
      
